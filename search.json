[
  {
    "objectID": "examples/open/eda.html",
    "href": "examples/open/eda.html",
    "title": "Prompts",
    "section": "",
    "text": "import pandas as pd\nimport plotly.offline as pyo\n\nfrom evm_sleuth.utils.postgres import PostgresClient\nfrom evm_sleuth.config import settings\nimport sys\n\nclient = PostgresClient(settings.postgres)\nsys.path.append(\"..\")\npyo.init_notebook_mode(connected=True)\n\nfrom helpers.plotting import daily_supply"
  },
  {
    "objectID": "examples/open/eda.html#primary-market",
    "href": "examples/open/eda.html#primary-market",
    "title": "Prompts",
    "section": "Primary market",
    "text": "Primary market\n\nquery = \"\"\"\nSELECT \n    DATE(datetime) as date,\n    SUM(CASE \n        WHEN from_address = '0x0000000000000000000000000000000000000000' \n        THEN amount \n        ELSE 0 \n    END) as daily_mint_amount,\n    SUM(CASE \n        WHEN to_address = '0x0000000000000000000000000000000000000000' \n        THEN amount \n        ELSE 0 \n    END) as daily_burn_amount,\n    COUNT(CASE \n        WHEN from_address = '0x0000000000000000000000000000000000000000' \n        THEN 1 \n    END) as mint_count,\n    COUNT(CASE \n        WHEN to_address = '0x0000000000000000000000000000000000000000' \n        THEN 1 \n    END) as burn_count\nFROM staging.erc20_transfer\nWHERE token_address = '0x323c03c48660fe31186fa82c289b0766d331ce21'\nGROUP BY DATE(datetime)\nORDER BY date ASC;\n\"\"\"\ndf = pd.read_sql(query, client.sqlalchemy_engine)\ndf\n\n\n\n\n\n\n\n\ndate\ndaily_mint_amount\ndaily_burn_amount\nmint_count\nburn_count\n\n\n\n\n0\n2025-04-14\n1.000000e+18\n0.000000e+00\n1\n0\n\n\n1\n2025-04-17\n1.619322e+19\n1.619322e+19\n1\n1\n\n\n2\n2025-04-18\n8.262817e+21\n0.000000e+00\n4\n0\n\n\n3\n2025-04-20\n1.007488e+19\n0.000000e+00\n1\n0\n\n\n4\n2025-04-21\n6.717280e+21\n5.376803e+19\n12\n1\n\n\n...\n...\n...\n...\n...\n...\n\n\n115\n2025-08-22\n1.645608e+22\n0.000000e+00\n1\n0\n\n\n116\n2025-08-23\n1.067235e+19\n0.000000e+00\n1\n0\n\n\n117\n2025-08-24\n0.000000e+00\n0.000000e+00\n0\n0\n\n\n118\n2025-08-25\n9.490073e+20\n0.000000e+00\n1\n0\n\n\n119\n2025-08-26\n2.290196e+22\n0.000000e+00\n6\n0\n\n\n\n\n120 rows × 5 columns\n\n\n\n\ndaily_supply(df, title=\"$OPEN\").show()"
  },
  {
    "objectID": "examples/open/eda.html#dex-trading",
    "href": "examples/open/eda.html#dex-trading",
    "title": "Prompts",
    "section": "DEX trading",
    "text": "DEX trading\n\nquery = \"\"\"\nSELECT \n    *\nFROM \n    staging.decoded_logs\nWHERE\n    address = '0xabaebcc9eee363cea2150ee03ac96db110f0e745'\nORDER BY \n    datetime DESC\n\"\"\"\ndf = pd.read_sql(query, client.sqlalchemy_engine)\n# df['to_address'].value_counts()\ndf\ndf['topic0'].value_counts()\n\ntopic0\n0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67    975\n0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c    224\n0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde    218\n0x70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0    214\n0x98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95      1\nName: count, dtype: int64\n\n\n\nquery = \"\"\"\nSELECT \n    *\nFROM \n    staging.decoded_logs\nWHERE\n    address = '0xcbcd4d46ff017b90c0d1cda1cbd20086b0901738'\nORDER BY \n    datetime DESC\n\"\"\"\ndf = pd.read_sql(query, client.sqlalchemy_engine)\n# df['to_address'].value_counts()\ndf\ndf['topic0'].value_counts()\n\ntopic0\n0x143f1f8e861fbdeddd5b46e844b7d3ac7b86a122f36e8c463859ee6811b1f29c    183\n0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef    140\n0x7196cbf63df1f2ec20638e683ebe51d18260be510592ee1e2efe3f3cfd4c33e9     51\n0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925     19\n0xdd3c0336a16f1b64f172b7bb0dad5b2b3c7c76f91e8c4aafd6aae60dce800153     12\n0xe200e24d4a4c7cd367dd9befe394dc8a14e6d58c88ff5e2f512d65a9e0aa9c5c      6\n0x3bbd5f2f4711532d6e9ee88dfdf2f1468e9a4c3ae5e14d2e1a67bf4242d008d0      5\nName: count, dtype: int64\n\n\n\n'0xcBcD4d46FF017B90C0d1cDA1CbD20086b0901738'.lower()\n\n'0xcbcd4d46ff017b90c0d1cda1cbd20086b0901738'\n\n\n\ndf[\n    (df['from_address'] == '0xaBaebcc9EEe363CeA2150eE03ac96db110F0e745'.lower())\n    | (df['to_address'] == '0xaBaebcc9EEe363CeA2150eE03ac96db110F0e745'.lower())\n]\n\n\n\n\n\n\n\n\nchainid\ntoken_address\nfrom_address\nto_address\namount\ndatetime\ntransaction_hash\n\n\n\n\n2\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0x0e841149b31e4e8b0dff7e5d5ed4e94d353f56ea\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0000000000000000000000000000000000000000000000...\n2025-08-26 20:46:23+00:00\n0xaeda2f77924b5644bd13cfb00dc1a8a34d7bb3b93123...\n\n\n3\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0x0000000000efa780a8e6f50fc5de9c1497bfd175\n0000000000000000000000000000000000000000000000...\n2025-08-26 16:50:59+00:00\n0xd0a9a72beb4a39b1dd5b8766cab92bb3221da269d294...\n\n\n6\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xe08d97e151473a848c3d9ca3f323cb720472d015\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0000000000000000000000000000000000000000000000...\n2025-08-26 16:27:11+00:00\n0x19a9c5cd5b2a273d541817a02ba5b524d57ce9f0f352...\n\n\n7\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0x1f2f10d1c40777ae1da742455c65828ff36df387\n0000000000000000000000000000000000000000000000...\n2025-08-26 16:12:47+00:00\n0x75a14e8f873c62c3393a5e5082f387135572a4f9e728...\n\n\n10\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xe08d97e151473a848c3d9ca3f323cb720472d015\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0000000000000000000000000000000000000000000000...\n2025-08-26 16:12:35+00:00\n0x4f5dc891022d90fcc4c191d8ca7147d798809eba8f5a...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2617\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0x828ae1566824a9835acb6f565e1e9ea22bfb883a\n0000000000000000000000000000000000000000000000...\n2025-04-24 18:11:59+00:00\n0x7d2be2dcd4265d8b7244ce78df9e1ee6490f21449b00...\n\n\n2619\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0xea0402e016f9baf1dc1ae341196f8e66559f8c40\n0000000000000000000000000000000000000000000000...\n2025-04-24 18:10:59+00:00\n0x1583380806d0eec0acb340067c23e2f538d77709777d...\n\n\n2620\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xcbcd4d46ff017b90c0d1cda1cbd20086b0901738\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0000000000000000000000000000000000000000000000...\n2025-04-24 18:10:59+00:00\n0x08addc7bbffbde441bccb6314d05ac0481cf672aa2f7...\n\n\n2621\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xb7d411007208143b9fec4f0790f56a3de984e66b\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0000000000000000000000000000000000000000000000...\n2025-04-24 18:10:47+00:00\n0xfa120b61535e5a101da7e8a1c2bb3254a47cf095116e...\n\n\n2642\n1\n0x323c03c48660fe31186fa82c289b0766d331ce21\n0xd84e0c72dc2f8363b46d4adfc58bfd82e49222d9\n0xabaebcc9eee363cea2150ee03ac96db110f0e745\n0000000000000000000000000000000000000000000000...\n2025-04-23 19:52:23+00:00\n0xfefdfbc0b1c48b677aab2d94f85a14130a4a3588ab4c...\n\n\n\n\n1401 rows × 7 columns\n\n\n\n\nh = \"0x000000000000000000000000000000000000000000000000e0b9e291e29538b5\"\nint(h, 16)#  - 16193223051386894000\n\n16193223051386894517\n\n\n\n1000000000000000000/10**18\n\n1.0"
  },
  {
    "objectID": "examples/open.html#primary-market",
    "href": "examples/open.html#primary-market",
    "title": "$OPEN",
    "section": "Primary market",
    "text": "Primary market"
  },
  {
    "objectID": "examples/open.html#dex",
    "href": "examples/open.html#dex",
    "title": "$OPEN",
    "section": "DEX",
    "text": "DEX"
  },
  {
    "objectID": "examples/helpers/README_plotting.html",
    "href": "examples/helpers/README_plotting.html",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "This module provides comprehensive plotting functions using Plotly to visualize daily mint and burn data for ERC-20 tokens.\n\n\n\nDaily Mint/Burn Analysis: Multi-panel visualization showing volume, transaction counts, and net supply changes\nCumulative Supply Tracking: Line charts showing cumulative minted, burned, and net supply over time\nActivity Heatmap: Visual representation of mint/burn activity by day of week and hour\nComprehensive Dashboard: All visualizations combined in a single interactive dashboard\nInteractive HTML Output: All plots are saved as interactive HTML files that can be shared and viewed in any browser\n\n\n\n\npip install plotly pandas numpy\n\n\n\nfrom helpers.plotting import plot_daily_mint_burn, create_dashboard\nimport pandas as pd\n\n# Your data from the SQL query\ndata = pd.DataFrame({\n    'date': ['2025-01-01', '2025-01-02', ...],\n    'daily_mint_amount': [1000000000000000000, 0, ...],\n    'daily_burn_amount': [0, 500000000000000000, ...],\n    'mint_count': [1, 0, ...],\n    'burn_count': [0, 1, ...]\n})\n\n# Create a daily mint/burn plot\nfig = plot_daily_mint_burn(\n    data=data,\n    token_symbol=\"YOUR_TOKEN\",\n    token_address=\"0x323c03c48660fe31186fa82c289b0766d331ce21\",\n    save_path=\"token_analysis.html\"\n)\n\n# Or create a comprehensive dashboard\ndashboard = create_dashboard(\n    data=data,\n    token_symbol=\"YOUR_TOKEN\",\n    token_address=\"0x323c03c48660fe31186fa82c289b0766d331ce21\",\n    save_path=\"token_dashboard.html\"\n)\n\n\n\n\n\nCreates a comprehensive multi-panel visualization of daily mint and burn data.\nParameters: - data: DataFrame with columns: date, daily_mint_amount, daily_burn_amount, mint_count, burn_count - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 600) - show_volume: Whether to show volume bars (default: True) - show_counts: Whether to show transaction count lines (default: True) - color_scheme: Optional custom colors for mint/burn - title: Custom title for the plot - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - Daily volume bars (mint in green, burn in red) - Transaction count lines - Net supply change area chart - Interactive hover tooltips - Responsive layout\n\n\n\nCreates a line chart showing cumulative supply changes over time.\nParameters: - data: DataFrame with columns: date, daily_mint_amount, daily_burn_amount - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 500) - color_scheme: Optional custom colors - title: Custom title for the plot - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - Cumulative minted amount (green line) - Cumulative burned amount (red line) - Net supply (blue line) - Filled areas for better visualization\n\n\n\nCreates a heatmap showing mint/burn activity by day of week and hour.\nParameters: - data: DataFrame with columns: date, daily_mint_amount, daily_burn_amount - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 400) - color_scheme: Optional color scheme for the heatmap - title: Custom title for the plot - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - Activity intensity by day and hour - Color-coded activity levels - Interactive hover information\n\n\n\nCreates a comprehensive dashboard with all visualizations combined.\nParameters: - data: DataFrame with mint/burn data - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 800) - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - 6-panel layout with all visualizations - Summary statistics table - Consistent styling and layout - Interactive elements\n\n\n\n\nYour DataFrame should have the following columns:\ndata = pd.DataFrame({\n    'date': ['2025-01-01', '2025-01-02', ...],  # Date strings or datetime objects\n    'daily_mint_amount': [1000000000000000000, 0, ...],  # Raw amounts (wei)\n    'daily_burn_amount': [0, 500000000000000000, ...],   # Raw amounts (wei)\n    'mint_count': [1, 0, ...],                          # Integer counts\n    'burn_count': [0, 1, ...]                           # Integer counts\n})\nNote: The functions automatically convert amounts from wei (18 decimals) to human-readable format by dividing by 1e18.\n\n\n\n\n\nYou can customize colors by passing a color_scheme dictionary:\ncustom_colors = {\n    'mint': '#00FF00',      # Bright green\n    'burn': '#FF0000',      # Bright red\n    'mint_light': '#90EE90', # Light green\n    'burn_light': '#FFB6C1'  # Light red\n}\n\nfig = plot_daily_mint_burn(\n    data=data,\n    color_scheme=custom_colors,\n    save_path=\"custom_colors.html\"\n)\n\n\n\nAll functions support custom titles and will automatically generate descriptive titles if none provided:\nfig = plot_daily_mint_burn(\n    data=data,\n    token_symbol=\"USDC\",\n    token_address=\"0xa0b86a33e6441b8c4c8b0b8c4c8b0b8c4c8b0b8c\",\n    title=\"Custom Analysis Title\",\n    save_path=\"custom_title.html\"\n)\n\n\n\n\nAll functions save plots as interactive HTML files that can be: - Opened in any web browser - Shared via email or web - Embedded in web applications - Viewed offline\n\n\n\n# Run your SQL query\nquery = \"\"\"\nSELECT \n    DATE(datetime) as date,\n    SUM(CASE WHEN from_address = '0x0000000000000000000000000000000000000000' \n        THEN amount ELSE 0 END) as daily_mint_amount,\n    SUM(CASE WHEN to_address = '0x0000000000000000000000000000000000000000' \n        THEN amount ELSE 0 END) as daily_burn_amount,\n    COUNT(CASE WHEN from_address = '0x0000000000000000000000000000000000000000' \n        THEN 1 END) as mint_count,\n    COUNT(CASE WHEN to_address = '0x0000000000000000000000000000000000000000' \n        THEN 1 END) as burn_count\nFROM staging.erc20_transfer\nWHERE token_address = '0x323c03c48660fe31186fa82c289b0766d331ce21'\nGROUP BY DATE(datetime)\nORDER BY date DESC;\n\"\"\"\n\n# Execute query and get results\n# results = execute_query(query)\n\n# Convert to DataFrame\n# data = pd.DataFrame(results)\n\n# Create visualizations\nfig = plot_daily_mint_burn(\n    data=data,\n    token_symbol=\"YOUR_TOKEN\",\n    token_address=\"0x323c03c48660fe31186fa82c289b0766d331ce21\",\n    save_path=\"token_analysis.html\"\n)\n\n\n\nTo see all functions in action, run the example script:\ncd examples/helpers\npython example_usage.py\nThis will generate sample visualizations and save them as HTML files.\n\n\n\n\nData Quality: Ensure your dates are properly formatted and amounts are numeric\nTime Range: For better visualizations, include at least 30 days of data\nToken Information: Include token symbols for better readability\nFile Naming: Use descriptive names for saved HTML files\nBrowser Compatibility: HTML files work best in modern browsers (Chrome, Firefox, Safari, Edge)"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#features",
    "href": "examples/helpers/README_plotting.html#features",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "Daily Mint/Burn Analysis: Multi-panel visualization showing volume, transaction counts, and net supply changes\nCumulative Supply Tracking: Line charts showing cumulative minted, burned, and net supply over time\nActivity Heatmap: Visual representation of mint/burn activity by day of week and hour\nComprehensive Dashboard: All visualizations combined in a single interactive dashboard\nInteractive HTML Output: All plots are saved as interactive HTML files that can be shared and viewed in any browser"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#installation-requirements",
    "href": "examples/helpers/README_plotting.html#installation-requirements",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "pip install plotly pandas numpy"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#quick-start",
    "href": "examples/helpers/README_plotting.html#quick-start",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "from helpers.plotting import plot_daily_mint_burn, create_dashboard\nimport pandas as pd\n\n# Your data from the SQL query\ndata = pd.DataFrame({\n    'date': ['2025-01-01', '2025-01-02', ...],\n    'daily_mint_amount': [1000000000000000000, 0, ...],\n    'daily_burn_amount': [0, 500000000000000000, ...],\n    'mint_count': [1, 0, ...],\n    'burn_count': [0, 1, ...]\n})\n\n# Create a daily mint/burn plot\nfig = plot_daily_mint_burn(\n    data=data,\n    token_symbol=\"YOUR_TOKEN\",\n    token_address=\"0x323c03c48660fe31186fa82c289b0766d331ce21\",\n    save_path=\"token_analysis.html\"\n)\n\n# Or create a comprehensive dashboard\ndashboard = create_dashboard(\n    data=data,\n    token_symbol=\"YOUR_TOKEN\",\n    token_address=\"0x323c03c48660fe31186fa82c289b0766d331ce21\",\n    save_path=\"token_dashboard.html\"\n)"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#available-functions",
    "href": "examples/helpers/README_plotting.html#available-functions",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "Creates a comprehensive multi-panel visualization of daily mint and burn data.\nParameters: - data: DataFrame with columns: date, daily_mint_amount, daily_burn_amount, mint_count, burn_count - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 600) - show_volume: Whether to show volume bars (default: True) - show_counts: Whether to show transaction count lines (default: True) - color_scheme: Optional custom colors for mint/burn - title: Custom title for the plot - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - Daily volume bars (mint in green, burn in red) - Transaction count lines - Net supply change area chart - Interactive hover tooltips - Responsive layout\n\n\n\nCreates a line chart showing cumulative supply changes over time.\nParameters: - data: DataFrame with columns: date, daily_mint_amount, daily_burn_amount - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 500) - color_scheme: Optional custom colors - title: Custom title for the plot - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - Cumulative minted amount (green line) - Cumulative burned amount (red line) - Net supply (blue line) - Filled areas for better visualization\n\n\n\nCreates a heatmap showing mint/burn activity by day of week and hour.\nParameters: - data: DataFrame with columns: date, daily_mint_amount, daily_burn_amount - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 400) - color_scheme: Optional color scheme for the heatmap - title: Custom title for the plot - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - Activity intensity by day and hour - Color-coded activity levels - Interactive hover information\n\n\n\nCreates a comprehensive dashboard with all visualizations combined.\nParameters: - data: DataFrame with mint/burn data - token_symbol: Optional token symbol for display - token_address: Optional token address for display - fig_height: Height of the figure in pixels (default: 800) - save_path: Optional path to save the plot as HTML\nReturns: Plotly figure object\nFeatures: - 6-panel layout with all visualizations - Summary statistics table - Consistent styling and layout - Interactive elements"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#data-format",
    "href": "examples/helpers/README_plotting.html#data-format",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "Your DataFrame should have the following columns:\ndata = pd.DataFrame({\n    'date': ['2025-01-01', '2025-01-02', ...],  # Date strings or datetime objects\n    'daily_mint_amount': [1000000000000000000, 0, ...],  # Raw amounts (wei)\n    'daily_burn_amount': [0, 500000000000000000, ...],   # Raw amounts (wei)\n    'mint_count': [1, 0, ...],                          # Integer counts\n    'burn_count': [0, 1, ...]                           # Integer counts\n})\nNote: The functions automatically convert amounts from wei (18 decimals) to human-readable format by dividing by 1e18."
  },
  {
    "objectID": "examples/helpers/README_plotting.html#customization",
    "href": "examples/helpers/README_plotting.html#customization",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "You can customize colors by passing a color_scheme dictionary:\ncustom_colors = {\n    'mint': '#00FF00',      # Bright green\n    'burn': '#FF0000',      # Bright red\n    'mint_light': '#90EE90', # Light green\n    'burn_light': '#FFB6C1'  # Light red\n}\n\nfig = plot_daily_mint_burn(\n    data=data,\n    color_scheme=custom_colors,\n    save_path=\"custom_colors.html\"\n)\n\n\n\nAll functions support custom titles and will automatically generate descriptive titles if none provided:\nfig = plot_daily_mint_burn(\n    data=data,\n    token_symbol=\"USDC\",\n    token_address=\"0xa0b86a33e6441b8c4c8b0b8c4c8b0b8c4c8b0b8c\",\n    title=\"Custom Analysis Title\",\n    save_path=\"custom_title.html\"\n)"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#output",
    "href": "examples/helpers/README_plotting.html#output",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "All functions save plots as interactive HTML files that can be: - Opened in any web browser - Shared via email or web - Embedded in web applications - Viewed offline"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#example-usage-with-real-data",
    "href": "examples/helpers/README_plotting.html#example-usage-with-real-data",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "# Run your SQL query\nquery = \"\"\"\nSELECT \n    DATE(datetime) as date,\n    SUM(CASE WHEN from_address = '0x0000000000000000000000000000000000000000' \n        THEN amount ELSE 0 END) as daily_mint_amount,\n    SUM(CASE WHEN to_address = '0x0000000000000000000000000000000000000000' \n        THEN amount ELSE 0 END) as daily_burn_amount,\n    COUNT(CASE WHEN from_address = '0x0000000000000000000000000000000000000000' \n        THEN 1 END) as mint_count,\n    COUNT(CASE WHEN to_address = '0x0000000000000000000000000000000000000000' \n        THEN 1 END) as burn_count\nFROM staging.erc20_transfer\nWHERE token_address = '0x323c03c48660fe31186fa82c289b0766d331ce21'\nGROUP BY DATE(datetime)\nORDER BY date DESC;\n\"\"\"\n\n# Execute query and get results\n# results = execute_query(query)\n\n# Convert to DataFrame\n# data = pd.DataFrame(results)\n\n# Create visualizations\nfig = plot_daily_mint_burn(\n    data=data,\n    token_symbol=\"YOUR_TOKEN\",\n    token_address=\"0x323c03c48660fe31186fa82c289b0766d331ce21\",\n    save_path=\"token_analysis.html\"\n)"
  },
  {
    "objectID": "examples/helpers/README_plotting.html#running-examples",
    "href": "examples/helpers/README_plotting.html#running-examples",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "To see all functions in action, run the example script:\ncd examples/helpers\npython example_usage.py\nThis will generate sample visualizations and save them as HTML files."
  },
  {
    "objectID": "examples/helpers/README_plotting.html#tips-for-best-results",
    "href": "examples/helpers/README_plotting.html#tips-for-best-results",
    "title": "Plotting Functions for Token Mint/Burn Analysis",
    "section": "",
    "text": "Data Quality: Ensure your dates are properly formatted and amounts are numeric\nTime Range: For better visualizations, include at least 30 days of data\nToken Information: Include token symbols for better readability\nFile Naming: Use descriptive names for saved HTML files\nBrowser Compatibility: HTML files work best in modern browsers (Chrome, Firefox, Safari, Edge)"
  }
]